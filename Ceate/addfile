@Service
public class ExcelProcessorService {

    private final BlockingQueue<ExcelUpdateRequest> queue = new LinkedBlockingQueue<>();
    private final ConcurrentMap<String, Boolean> fileExistenceCache = new ConcurrentHashMap<>();
    private final ExecutorService executor = Executors.newFixedThreadPool(10);

    @PostConstruct
    public void initWorkers() {
        for (int i = 0; i < 10; i++) {
            executor.submit(this::worker);
        }
    }

    public void enqueueRequest(ExcelUpdateRequest request) {
        queue.offer(request);
    }

    private void worker() {
        while (true) {
            try {
                ExcelUpdateRequest req = queue.take();
                process(req);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    private void process(ExcelUpdateRequest request) {
        String fileName = request.fileName();
        boolean exists = fileExistenceCache.computeIfAbsent(fileName, this::checkIfExistsInS3);

        Optional<String> fileKeyOpt = exists ? Optional.of(fileName) : Optional.empty();

        fileKeyOpt.ifPresentOrElse(
            key -> {
                try (InputStream in = downloadFileFromS3(key)) {
                    Workbook workbook = new XSSFWorkbook(in);
                    updateWorkbook(workbook, request);
                    uploadToS3(workbook, key);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            },
            () -> {
                try {
                    Workbook workbook = createWorkbook(request);
                    uploadToS3(workbook, fileName);
                    fileExistenceCache.put(fileName, true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        );
    }

    private boolean checkIfExistsInS3(String fileName) {
        // TODO: Add actual AWS S3 existence check logic
        return false;
    }

    private InputStream downloadFileFromS3(String key) {
        // TODO: Implement S3 download logic
        return new ByteArrayInputStream(new byte[0]);
    }

    private void uploadToS3(Workbook wb, String key) {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {
            wb.write(bos);
            // TODO: Upload bos.toByteArray() to S3
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void updateWorkbook(Workbook wb, ExcelUpdateRequest request) {
        Sheet sheet = wb.getSheetAt(0);
        if (sheet == null) sheet = wb.createSheet("Data");

        Row row = sheet.getRow(0);
        if (row == null) row = sheet.createRow(0);

        row.createCell(0).setCellValue(request.name());
        row.createCell(1).setCellValue(request.status());
    }

    private Workbook createWorkbook(ExcelUpdateRequest request) {
        Workbook wb = new XSSFWorkbook();
        Sheet sheet = wb.createSheet("Data");
        Row row = sheet.createRow(0);
        row.createCell(0).setCellValue(request.name());
        row.createCell(1).setCellValue(request.status());
        return wb;
    }
}


----------1---------1-------1-------


// Request Model
record Request(String fileName, String name, String status) {}

// Thread-safe queue
BlockingQueue<Request> queue = new LinkedBlockingQueue<>();

// In-memory cache to track existing files if desired
ConcurrentMap<String, Boolean> fileExistenceCache = new ConcurrentHashMap<>();

// Producer (called from controller or listener)
public void receiveRequest(Request request) {
    queue.offer(request); // Thread-safe non-blocking
}

// Consumer Logic
Runnable consumerTask = () -> {
    while (true) {
        try {
            Request req = queue.take(); // Blocks until an item is available
            processRequest(req);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
};

// Processing Logic
void processRequest(Request request) {
    String fileName = request.fileName();

    // Step 1: Check file existence in cache or S3
    boolean exists = fileExistenceCache.computeIfAbsent(fileName, fn -> checkS3FileExists(fn));
    
    // Step 2: Use Optional to handle logic if file exists
    Optional<String> fileKeyOpt = exists ? Optional.of(fileName) : Optional.empty();

    fileKeyOpt.ifPresentOrElse(
        // If file exists
        key -> {
            InputStream s3Input = downloadFileFromS3(key);
            Workbook workbook = loadWorkbook(s3Input);
            updateWorkbook(workbook, request);
            uploadWorkbookToS3(workbook, key);
        },
        // If file doesnâ€™t exist
        () -> {
            Workbook workbook = createNewWorkbook(request);
            uploadWorkbookToS3(workbook, fileName);
            fileExistenceCache.put(fileName, true); // update cache
        }
    );
}

boolean checkS3FileExists(String fileName) {
    // Use AWS S3 SDK to check if file exists
    return s3Client.doesObjectExist(bucketName, fileName);
}

InputStream downloadFileFromS3(String key) {
    // Download file as stream
}

Workbook loadWorkbook(InputStream in) {
    return new XSSFWorkbook(in); // Apache POI
}

void updateWorkbook(Workbook wb, Request request) {
    Sheet sheet = wb.getSheetAt(0);
    Row row = sheet.getRow(0);
    if (row == null) row = sheet.createRow(0);
    Cell cell1 = row.createCell(0);
    cell1.setCellValue(request.name());

    Cell cell2 = row.createCell(1);
    cell2.setCellValue(request.status());
}

Workbook createNewWorkbook(Request request) {
    Workbook wb = new XSSFWorkbook();
    Sheet sheet = wb.createSheet("Data");
    Row row = sheet.createRow(0);
    row.createCell(0).setCellValue(request.name());
    row.createCell(1).setCellValue(request.status());
    return wb;
}

void uploadWorkbookToS3(Workbook wb, String key) {
    // Convert workbook to stream and upload via S3 client
}

// Start thread pool
ExecutorService pool = Executors.newFixedThreadPool(10);
IntStream.range(0, 10).forEach(i -> pool.submit(consumerTask));