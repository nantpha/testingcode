import java.io.ByteArrayOutputStream;
import java.io.IOException;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;

public class TextToSpeech {
    public static void main(String[] args) throws IOException {
        // Set up the FreeTTS voice
        VoiceManager voiceManager = VoiceManager.getInstance();
        Voice voice = voiceManager.getVoice("kevin16");
        voice.allocate();

        // Convert text to speech and get the audio output
        String text = "Hello, world!";
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        AudioFormat audioFormat = new AudioFormat(16000, 16, 1, true, false);
        DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, audioFormat);
        SourceDataLine sourceDataLine;
        try {
            sourceDataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
            sourceDataLine.open(audioFormat);
        } catch (LineUnavailableException e) {
            e.printStackTrace();
            return;
        }
        voice.setAudioPlayer(new JavaSoundAudioPlayer(sourceDataLine));
        voice.speak(text);
        sourceDataLine.drain();
        sourceDataLine.close();
        byte[] audioBytes = outputStream.toByteArray();

        // Play the audio output
        AudioInputStream audioInputStreamForPlay = AudioSystem.getAudioInputStream(new ByteArrayInputStream(audioBytes));
        Clip clip = AudioSystem.getClip();
        clip.open(audioInputStreamForPlay);
        clip.start();
        while (clip.isActive()) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        clip.close();

        // Deallocate the voice resources
        voice.deallocate();
    }
}

class JavaSoundAudioPlayer implements com.sun.speech.freetts.audio.AudioPlayer {
    private SourceDataLine sourceDataLine;

    public JavaSoundAudioPlayer(SourceDataLine sourceDataLine) {
        this.sourceDataLine = sourceDataLine;
    }

    @Override
    public boolean write(byte[] audioData) {
        sourceDataLine.write(audioData, 0, audioData.length);
        return true;
    }

    @Override
    public void close() {
        sourceDataLine.drain();
    }

    @Override
    public void reset() {
    }

    @Override
    public void startFirstSampleTimer() {
    }

    @Override
    public long getTime() {
        return 0;
    }
}
This code sets up a ByteArrayOutputStream outputStream to capture the audio data generated by the Voice object. It creates an AudioFormat and DataLine.Info to set up a SourceDataLine for playing the audio, and sets an instance of the JavaSoundAudioPlayer class (which implements the com.sun.speech.freetts.audio.AudioPlayer interface) as the audio player for the Voice object.

After the Voice object speaks the text, the SourceDataLine is drained and closed, and the audio data is written to the outputStream.

The audio data is then played using the Clip and AudioSystem.getClip() methods




prashanth.syne@outlook.com
alternate 
Here is an alternate solution that uses the MaryTTS library for text-to-speech conversion in Java:

java
Copy code
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailable



prashanth.syne@outlook.com
alternate MaryTTS  with out 
If you do not wish to use any third-party libraries for text-to-speech conversion in Java, you can use the built-in javax.sound.sampled package to accomplish this task.

Here is an example code that demonstrates this:

java
Copy code
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;

public class TextToSpeech {
    public static void main(String[] args) {
        // Set up the text-to-speech parameters
        String text = "Hello, world!";
        Voice voice = Voice.FRED;
        float rate = 120;
        float pitch = 100;
        float volume = 1;

        // Convert text to speech
        try {
            // Create a new AudioFormat object for the output stream
            AudioFormat audioFormat = new AudioFormat(16000, 16, 1, true, false);

            // Create a new TargetDataLine object for the output stream
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, audioFormat);
            TargetDataLine targetDataLine = (TargetDataLine) AudioSystem.getLine(info);
            targetDataLine.open(audioFormat);
            targetDataLine.start();

            // Create a new ByteArrayOutputStream object to capture the output stream
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

            // Create a new AudioInputStream object to read the output stream
            AudioInputStream audioInputStream = new AudioInputStream(targetDataLine);

            // Convert the text to speech using the built-in synthesizer
            synthesizer = Central.createSynthesizer(null);
            synthesizer.allocate();
            synthesizer.resume();
            synthesizer.getSynthesizerProperties().setVoice(voice);
            synthesizer.getSynthesizerProperties().setSpeakingRate(rate);
            synthesizer.getSynthesizerProperties().setPitch(pitch);
            synthesizer.getSynthesizerProperties().setVolume(volume);
            synthesizer.speak(text, null);
            synthesizer.waitEngineState(Synthesizer.QUEUE_EMPTY);

            // Write the captured output stream to the ByteArrayOutputStream object
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = audioInputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            // Close the ByteArrayOutputStream and AudioInputStream objects
            outputStream.close();
            audioInputStream.close();

            // Play the output stream using the Clip object
            ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(inputStream);
            Clip clip = AudioSystem.getClip();
            clip.open(audioInput);
            clip.start();
            Thread.sleep(clip.getMicrosecondLength() / 1000);
        } catch (IOException | LineUnavailableException | InterruptedException | UnsupportedAudioFileException | SynthesisException e) {
            e.printStackTrace();
        }
    }
}



