import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvValidationException;

import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class CSVComparator {

    public static void main(String[] args) throws IOException, CsvValidationException {
        String file1Path = "file1.csv";
        String file2Path = "file2.csv";

        compareCSVFiles(file1Path, file2Path);
    }

    public static void compareCSVFiles(String file1Path, String file2Path) throws IOException, CsvValidationException {
        List<Map<String, String>> data1 = readCSV(file1Path);
        List<Map<String, String>> data2 = readCSV(file2Path);

        if (data1.isEmpty() || data2.isEmpty()) {
            System.out.println("One or both files are empty.");
            return;
        }

        Set<Map<String, String>> set1 = new HashSet<>(data1);
        Set<Map<String, String>> set2 = new HashSet<>(data2);

        Set<Map<String, String>> onlyInFile1 = new HashSet<>(set1);
        onlyInFile1.removeAll(set2);  // Rows present only in file1

        Set<Map<String, String>> onlyInFile2 = new HashSet<>(set2);
        onlyInFile2.removeAll(set1);  // Rows present only in file2

        if (onlyInFile1.isEmpty() && onlyInFile2.isEmpty()) {
            System.out.println("Both CSV files are identical.");
        } else {
            if (!onlyInFile1.isEmpty()) {
                System.out.println("Rows present only in File1:");
                onlyInFile1.forEach(System.out::println);
            }
            if (!onlyInFile2.isEmpty()) {
                System.out.println("Rows present only in File2:");
                onlyInFile2.forEach(System.out::println);
            }
        }
    }

    private static List<Map<String, String>> readCSV(String filePath) throws IOException, CsvValidationException {
        List<Map<String, String>> data = new ArrayList<>();

        try (CSVReader reader = new CSVReader(new FileReader(filePath))) {
            String[] headers = reader.readNext();
            if (headers == null) return data;

            String[] row;
            while ((row = reader.readNext()) != null) {
                Map<String, String> rowData = new LinkedHashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    rowData.put(headers[i], row[i]);
                }
                data.add(rowData);
            }
        }
        return data;
    }
}