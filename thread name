import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;

@Service
public class S3Service {

    private final S3Client s3Client;
    private final ThreadPoolTaskExecutor taskExecutor;
    private final BlockingQueue<List<S3Object>> queue = new LinkedBlockingQueue<>(10);

    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
        
        // Initialize ThreadPool
        this.taskExecutor = new ThreadPoolTaskExecutor();
        this.taskExecutor.setCorePoolSize(3); // Three parallel fetchers
        this.taskExecutor.setMaxPoolSize(5);
        this.taskExecutor.setQueueCapacity(10);
        this.taskExecutor.initialize();
    }

    public void fetchAndProcessS3Objects(int targetCount) {
        ExecutorService fetcherPool = Executors.newFixedThreadPool(3); // 3 Fetchers
        ExecutorService processorPool = Executors.newSingleThreadExecutor(); // 1 Processor

        final String bucketName = "your-bucket-name";
        final int maxKeys = 1000;
        final AtomicInteger totalCount = new AtomicInteger(0);
        final AtomicReference<String> continuationToken = new AtomicReference<>(null);

        // Start Fetcher Threads
        for (int i = 0; i < 3; i++) {
            fetcherPool.submit(() -> {
                while (totalCount.get() < targetCount) {
                    ListObjectsV2Request request = ListObjectsV2Request.builder()
                        .bucket(bucketName)
                        .maxKeys(maxKeys)
                        .continuationToken(continuationToken.get())
                        .build();

                    ListObjectsV2Response response = s3Client.listObjectsV2(request);
                    if (response.contents().isEmpty()) break;

                    try {
                        queue.put(response.contents()); // Store in queue
                        totalCount.addAndGet(response.contents().size());
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        return;
                    }

                    if (!response.isTruncated()) break;
                    continuationToken.set(response.nextContinuationToken());
                }
            });
        }

        // Start Processor Thread
        processorPool.submit(() -> {
            while (totalCount.get() < targetCount) {
                try {
                    List<S3Object> objects = queue.take();
                    processObjectsInChunks(objects);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        });

        fetcherPool.shutdown();
        processorPool.shutdown();
    }

    private void processObjectsInChunks(List<S3Object> objects) {
        int chunkSize = 300;
        for (int i = 0; i < objects.size(); i += chunkSize) {
            List<S3Object> chunk = objects.subList(i, Math.min(i + chunkSize, objects.size()));
            processChunk(chunk);
        }
    }

    private void processChunk(List<S3Object> chunk) {
        System.out.println("Processing " + chunk.size() + " objects...");
        // Your business logic here
    }
}
