import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

@Service
public class ExcelService {

    public String convertExcelToHtmlTable(File file) throws IOException {
        StringBuilder htmlTable = new StringBuilder();
        htmlTable.append("<table border='1'>");

        // Open the Excel file
        FileInputStream fis = new FileInputStream(file);
        Workbook workbook = null;

        // Check file extension and initialize the correct workbook type
        if (file.getName().endsWith(".xlsx")) {
            workbook = new XSSFWorkbook(fis);
        } else if (file.getName().endsWith(".xls")) {
            workbook = new HSSFWorkbook(fis);
        }

        // Iterate through sheets
        if (workbook != null) {
            Sheet sheet = workbook.getSheetAt(0); // Read the first sheet
            for (Row row : sheet) {
                htmlTable.append("<tr>");
                for (Cell cell : row) {
                    htmlTable.append("<td>").append(getCellValue(cell)).append("</td>");
                }
                htmlTable.append("</tr>");
            }
            workbook.close();
        }

        htmlTable.append("</table>");
        fis.close();
        return htmlTable.toString();
    }

    // Utility method to get cell value as String
    private String getCellValue(Cell cell) {
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            default:
                return "";
        }
    }
}
