import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class ExcelService {

    public List<List<String>> readExcelFile(File file) throws IOException {
        List<List<String>> data = new ArrayList<>();

        // Open the Excel file
        FileInputStream fis = new FileInputStream(file);
        Workbook workbook = null;

        // Check file extension and initialize the correct workbook type
        if (file.getName().endsWith(".xlsx")) {
            workbook = new XSSFWorkbook(fis);
        } else if (file.getName().endsWith(".xls")) {
            workbook = new HSSFWorkbook(fis);
        }

        // Iterate through sheets
        if (workbook != null) {
            Sheet sheet = workbook.getSheetAt(0); // Read the first sheet (you can change this to read other sheets)
            Iterator<Row> rowIterator = sheet.iterator();

            // Iterate through rows
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                List<String> rowData = new ArrayList<>();

                // Iterate through columns (cells)
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    rowData.add(getCellValue(cell));
                }

                data.add(rowData); // Add row data to the list
            }

            workbook.close();
        }

        fis.close();
        return data;
    }

    // Utility method to get cell value as String
    private String getCellValue(Cell cell) {
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            default:
                return "";
        }
    }
}
